/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import type { QueueMember } from '../types/QueueMember'
import { queueMemberBeet } from '../types/QueueMember'

/**
 * Arguments used to create {@link Oracle}
 * @category Accounts
 * @category generated
 */
export interface OracleArgs {
  authority: web3.PublicKey
  priorityQueue: QueueMember[]
}

export const oracleDiscriminator = [139, 194, 131, 179, 140, 179, 229, 244]
/**
 * Holds the data for the {@link Oracle} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Oracle implements OracleArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly priorityQueue: QueueMember[],
  ) {}

  /**
   * Creates a {@link Oracle} instance from the provided args.
   */
  static fromArgs(args: OracleArgs) {
    return new Oracle(args.authority, args.priorityQueue)
  }

  /**
   * Deserializes the {@link Oracle} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [Oracle, number] {
    return Oracle.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Oracle} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Oracle> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Oracle account at ${address}`)
    }
    return Oracle.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'DMG9gp5VHPVpA3bst6yhC4L4D4aZiUjUTibVQGvJzpjy',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, oracleBeet)
  }

  /**
   * Deserializes the {@link Oracle} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Oracle, number] {
    return oracleBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Oracle} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return oracleBeet.serialize({
      accountDiscriminator: oracleDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Oracle} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: OracleArgs) {
    const instance = Oracle.fromArgs(args)
    return oracleBeet.toFixedFromValue({
      accountDiscriminator: oracleDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Oracle} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: OracleArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Oracle.byteSize(args),
      commitment,
    )
  }

  /**
   * Returns a readable version of {@link Oracle} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      priorityQueue: this.priorityQueue,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const oracleBeet = new beet.FixableBeetStruct<
  Oracle,
  OracleArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['priorityQueue', beet.array(queueMemberBeet)],
  ],
  Oracle.fromArgs,
  'Oracle',
)
