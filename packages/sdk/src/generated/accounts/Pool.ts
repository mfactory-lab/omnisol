/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Pool}
 * @category Accounts
 * @category generated
 */
export interface PoolArgs {
  poolMint: web3.PublicKey
  authority: web3.PublicKey
  stakeSource: web3.PublicKey
  depositAmount: beet.bignum
  collateralsAmount: beet.bignum
  authorityBump: number
  isActive: boolean
  feeReceiver: web3.PublicKey
  withdrawFee: number
  mintFee: number
  depositFee: number
  storageFee: number
  minDeposit: beet.bignum
}

export const poolDiscriminator = [241, 154, 109, 4, 17, 177, 109, 188]
/**
 * Holds the data for the {@link Pool} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Pool implements PoolArgs {
  private constructor(
    readonly poolMint: web3.PublicKey,
    readonly authority: web3.PublicKey,
    readonly stakeSource: web3.PublicKey,
    readonly depositAmount: beet.bignum,
    readonly collateralsAmount: beet.bignum,
    readonly authorityBump: number,
    readonly isActive: boolean,
    readonly feeReceiver: web3.PublicKey,
    readonly withdrawFee: number,
    readonly mintFee: number,
    readonly depositFee: number,
    readonly storageFee: number,
    readonly minDeposit: beet.bignum,
  ) {}

  /**
   * Creates a {@link Pool} instance from the provided args.
   */
  static fromArgs(args: PoolArgs) {
    return new Pool(
      args.poolMint,
      args.authority,
      args.stakeSource,
      args.depositAmount,
      args.collateralsAmount,
      args.authorityBump,
      args.isActive,
      args.feeReceiver,
      args.withdrawFee,
      args.mintFee,
      args.depositFee,
      args.storageFee,
      args.minDeposit,
    )
  }

  /**
   * Deserializes the {@link Pool} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [Pool, number] {
    return Pool.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Pool} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Pool> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Pool account at ${address}`)
    }
    return Pool.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'DMG9gp5VHPVpA3bst6yhC4L4D4aZiUjUTibVQGvJzpjy',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, poolBeet)
  }

  /**
   * Deserializes the {@link Pool} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Pool, number] {
    return poolBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Pool} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return poolBeet.serialize({
      accountDiscriminator: poolDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Pool}
   */
  static get byteSize() {
    return poolBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Pool} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Pool.byteSize,
      commitment,
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Pool} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Pool.byteSize
  }

  /**
   * Returns a readable version of {@link Pool} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      poolMint: this.poolMint.toBase58(),
      authority: this.authority.toBase58(),
      stakeSource: this.stakeSource.toBase58(),
      depositAmount: (() => {
        const x = <{ toNumber: () => number }> this.depositAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      collateralsAmount: (() => {
        const x = <{ toNumber: () => number }> this.collateralsAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      authorityBump: this.authorityBump,
      isActive: this.isActive,
      feeReceiver: this.feeReceiver.toBase58(),
      withdrawFee: this.withdrawFee,
      mintFee: this.mintFee,
      depositFee: this.depositFee,
      storageFee: this.storageFee,
      minDeposit: (() => {
        const x = <{ toNumber: () => number }> this.minDeposit
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const poolBeet = new beet.BeetStruct<
  Pool,
  PoolArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['poolMint', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
    ['stakeSource', beetSolana.publicKey],
    ['depositAmount', beet.u64],
    ['collateralsAmount', beet.u64],
    ['authorityBump', beet.u8],
    ['isActive', beet.bool],
    ['feeReceiver', beetSolana.publicKey],
    ['withdrawFee', beet.u16],
    ['mintFee', beet.u16],
    ['depositFee', beet.u16],
    ['storageFee', beet.u16],
    ['minDeposit', beet.u64],
  ],
  Pool.fromArgs,
  'Pool',
)
